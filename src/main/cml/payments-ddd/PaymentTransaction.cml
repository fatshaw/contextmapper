/* The DDD Cargo sample application modeled in CML. Note that we split the application into multiple bounded contexts. */
ContextMap PaymentTransaction {
    contains Airway
    contains TokenInterceptor
    contains TokenService
    contains PaymentGateway
    contains PaymentCore
    contains LPMAdaptor
    contains CardAdaptor
    contains PAExecutorcard
    contains PAExecutorwallet
    contains PAFX
    contains Fraud, PACard3ds, PAMerchantEvents
    contains PAConfigCenter
    contains PAMerchantCenter
    contains PARoutingEngine
    contains PAAccountUpdater
    contains Accountservice
    contains AuthorizationService
    contains NotificationWebhook
    contains FX

    Airway [D]<-[U] TokenInterceptor

    TokenInterceptor [D]<-[U] PaymentGateway

    TokenInterceptor [D]<-[U] TokenService

    PaymentGateway [D]<-[U] PaymentCore

    PaymentCore [D, ACL]<-[U] PAConfigCenter

    PAConfigCenter [D, ACL]<-[U, OHS] PAMerchantCenter

    PAConfigCenter [D, ACL]<-[U, OHS] AuthorizationService

    PAConfigCenter [D, ACL]<-[U, OHS] PARoutingEngine

    PARoutingEngine [D, ACL]<-[U, OHS] PAMerchantCenter

    PAMerchantCenter [D, ACL]<-[U, OHS] Accountservice

    PaymentCore [D, ACL]<-[U] PAExecutorcard

    PaymentCore [D, ACL]<-[U] PAExecutorwallet

    PaymentCore [D, ACL]<-[U] PAAccountUpdater

    PAExecutorwallet [D, ACL]<-[U] LPMAdaptor

    PAExecutorcard [D, ACL]<-[U] CardAdaptor

    PAExecutorcard [D, ACL]<-[U] PACard3ds

    PaymentCore [D, ACL]<-[U] Fraud

    PaymentCore [D, ACL]<-[U] PAFX

    PAFX [D, ACL]<-[U] FX

    PAMerchantEvents [C]<-[S] PaymentCore

    PAMerchantEvents [S]->[C] NotificationWebhook
}

BoundedContext TokenInterceptor{
}

BoundedContext PaymentGateway{
}

BoundedContext PAFusion{
}

/* The original booking application context */
BoundedContext PaymentCore {
    Aggregate PaymentIntent {
        Entity PaymentIntent {
            aggregateRoot
            - PaymentIntentID paymentIntentID
            - PaymentIntentState paymentIntentState
            - Customer customer
            - List<PaymentAttempt> paymentAttempt
            - PurchaseOrder order
        }
        ValueObject PaymentIntentID {
            int id key
        }
        ValueObject PurchaseOrder {
        }
        enum  PaymentIntentState {
            REQUIRES_PAYMENT_METHOD,
			REQUIRES_CUSTOMER_ACTION,
			REQUIRES_CAPTURE,
			SUCCEEDED,
			CANCELLED
        }
        DomainEvent PaymentIntentEvent
    }
    Aggregate Customer{
        Entity Customer{
            aggregateRoot
            - CustomerID customerID
            - PaymentInstrument paymentInstrument
        }
        ValueObject CustomerID {
            int id key
        }
    }
    Aggregate PaymentInstrument{
        Entity PaymentInstrument{
            aggregateRoot
            - PaymentInstrumentID paymentInstrumentID
            - Source source
            - Billing billing
        }
        ValueObject PaymentInstrumentID {
            int id key
        }
        ValueObject Source{
        }
        ValueObject Billing{
        }
        DomainEvent PaymentInstrumentEvent
    }
    Aggregate PaymentAttempt{
        Entity PaymentAttempt{
            aggregateRoot
            - PaymentAttemptID paymentAttemptID
            - PaymentInstrument paymentInstrumentSnapshot
            - List<PaymentDirective> paymentDirectives
            - MerchantConfig merchantConfig
            - Processor processor
            - PaymentAttemptState paymentAttemptState
        }
        enum  PaymentAttemptState {
            RECEIVED,
			FAILED_TO_PROCESS,
			FRAUD_FAILED,
			FRAUD_DECLINED,
			PENDING_AUTHENTICATION,
			AUTHENTICATION_FAILED,
			AUTHENTICATION_REDIRECTED,
			PENDING_AUTHORIZATION,
			AUTHORIZED,
			AUTHORIZATION_FAILED,
			CANCELLED,
			EXPIRED,
			CAPTURE_REQUESTED,
			CAPTURE_FAILED,
			SETTLED,
			PAID_NOT_SETTLED,
			PAID_SETTLED
        }
        ValueObject PaymentAttemptID {
            int id key
        }
        ValueObject MerchantConfig{
        }
        ValueObject Processor{
        }
        DomainEvent PaymentAttemptEvent
    }
    Aggregate Refund{
        Entity Refund{
            aggregateRoot
            string paymentAttemptID
            - RefundID refundID
            - PaymentDirective paymentDirective
            - PaymentInstrument paymentInstrumentSnapshot
            - RefundState refundState
        }
        ValueObject RefundID {
            int id key
        }
        enum  RefundState {
            RECEIVED,
			SENT_FOR_REFUND,
			FAILED_RETRYABLE,
			FAILED,
			SUCCEEDED // Core only
        }
        DomainEvent RefundProcessingFailedEvent
        DomainEvent RefundProcessingSuccessEvent
        DomainEvent RefundReceivedEvent
        DomainEvent RefundReceivingFailedEvent
    }
    Aggregate PaymentDirective{
        Entity PaymentDirective{
            aggregateRoot
            - PaymentDirectiveID paymentDirectiveID
            - PaymentDirectiveState paymentDirectiveState
        }
        ValueObject PaymentDirectiveID {
            int id key
        }
        enum  PaymentDirectiveState {
            DIRECTIVE_PENDING,
			DIRECTIVE_SUCCEEDED,
			DIRECTIVE_FAILED,
			DIRECTIVE_TECH_ERROR,
			DIRECTIVE_CANCELED
        }
    }
    Aggregate Consent{
        Entity Consent{
            aggregateRoot
            - PaymentIntentID paymentIntentId
        }
    }
}

BoundedContext CardAdaptor{
}

BoundedContext LPMAdaptor{
}

BoundedContext Fraud{
}

BoundedContext PACard3ds{
}

BoundedContext PAFX{
}

BoundedContext PAMerchantEvents{
}

BoundedContext PAConfigCenter{
}

BoundedContext Accountservice{
}

BoundedContext FX{
}

BoundedContext PAFundSplit{
}

BoundedContext PAExecutorwallet{
}

BoundedContext PAExecutorcard{
}

BoundedContext FinancialTransaction{
}

BoundedContext PAClearingHouse{
}

BoundedContext PAAccountUpdater{
}

BoundedContext PARoutingEngine{
}

BoundedContext PAMerchantCenter{
}

BoundedContext TokenService{
}

BoundedContext AuthorizationService{
}

BoundedContext Airway{
}

BoundedContext NotificationWebhook{
}

