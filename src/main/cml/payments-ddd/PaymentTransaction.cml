/* 
1. downstream depends on upstream
2. upstream does not know the existence of downstream.
3. downstream is down, upstream still can work
4. upstream is down, downstream can NOT work
*/
ContextMap PaymentTransaction {
    contains PACheckout
    contains Airway
    contains PATokenInterceptor
    contains PATokenService
    contains PAPaymentGateway
    contains PAPaymentCore
    contains PALPMAdaptor
    contains PACardAdaptor
    contains PAExecutorcard
    contains PAExecutorwallet
    contains PAFX
    contains RiskFraud, PACard3ds, PAMerchantEvents
    contains PAConfigCenter
    contains PAMerchantCenter
    contains PARoutingEngine
    contains PAExperimentEngine 
    contains PAAccountUpdater
    contains Accountservice
    contains AuthorizationService
    contains NotificationWebhook
    contains PAGetPaid
    contains FX
    contains GTPN 
    contains PAFusion
    
    PACheckout [D]<-[U] Airway 
    Airway [D]<-[U] PATokenInterceptor

    PATokenInterceptor [D]<-[U] PAPaymentGateway
    PAGetPaid [D]<-[U] PAPaymentGateway
    
    PATokenInterceptor [D]<-[U] PATokenService

    PAPaymentGateway [D]<-[U] PAPaymentCore

    PAPaymentCore [D, ACL]<-[U] PAConfigCenter

    PAConfigCenter [D, ACL]<-[U, OHS] PAMerchantCenter

    PAConfigCenter [D, ACL]<-[U, OHS] AuthorizationService

    PAConfigCenter [D, ACL]<-[U, OHS] PARoutingEngine

    PARoutingEngine [D, ACL]<-[U, OHS] PAMerchantCenter

    PAMerchantCenter [D, ACL]<-[U, OHS] Accountservice
    PAPaymentCore [D, ACL]<-[U] PAExperimentEngine
    
    PAPaymentCore [D, ACL]<-[U] PAExecutorcard

    PAPaymentCore [D, ACL]<-[U] PAExecutorwallet

    PAPaymentCore [D, ACL]<-[U] PAAccountUpdater

    PAExecutorwallet [D, ACL]<-[U] PALPMAdaptor
    
    PALPMAdaptor [D, ACL]<-[U] GTPN 

    PAExecutorcard [D, ACL]<-[U] PACardAdaptor

    PAExecutorcard [D, ACL]<-[U] PACard3ds

    PAPaymentCore [D, ACL]<-[U] RiskFraud

    PAPaymentCore [D, ACL]<-[U] PAFX

    PAFX [D, ACL]<-[U] FX

    PAMerchantEvents [C]<-[S] PAPaymentCore
    PAFusion [C]<-[S] PAPaymentCore
    PAMerchantEvents [S]->[C] NotificationWebhook
}

BoundedContext PATokenInterceptor{
}

BoundedContext PAPaymentGateway{
}

BoundedContext PAFusion{
}

/* The original booking application context */
BoundedContext PAPaymentCore {
    Aggregate PaymentIntent {
        Entity PaymentIntent {
            aggregateRoot
            - PaymentIntentID paymentIntentID
            - PaymentIntentState paymentIntentState
            - Customer customer
            - List<PaymentAttempt> paymentAttempt
            - PurchaseOrder order
        }
        ValueObject PaymentIntentID {
            int id key
        }
        ValueObject PurchaseOrder {
        }
        enum  PaymentIntentState {
            REQUIRES_PAYMENT_METHOD,
			REQUIRES_CUSTOMER_ACTION,
			REQUIRES_CAPTURE,
			SUCCEEDED,
			CANCELLED
        }
        DomainEvent PaymentIntentEvent
    }
    Aggregate Customer{
        Entity Customer{
            aggregateRoot
            - CustomerID customerID
            - PaymentInstrument paymentInstrument
        }
        ValueObject CustomerID {
            int id key
        }
    }
    Aggregate PaymentInstrument{
        Entity PaymentInstrument{
            aggregateRoot
            - PaymentInstrumentID paymentInstrumentID
            - Source source
            - Billing billing
        }
        ValueObject PaymentInstrumentID {
            int id key
        }
        ValueObject Source{
        }
        ValueObject Billing{
        }
        DomainEvent PaymentInstrumentEvent
    }
    Aggregate PaymentAttempt{
        Entity PaymentAttempt{
            aggregateRoot
            - PaymentAttemptID paymentAttemptID
            - PaymentInstrument paymentInstrumentSnapshot
            - List<PaymentDirective> paymentDirectives
            - MerchantConfig merchantConfig
            - Processor processor
            - PaymentAttemptState paymentAttemptState
        }
        enum  PaymentAttemptState {
            RECEIVED,
			FAILED_TO_PROCESS,
			FRAUD_FAILED,
			FRAUD_DECLINED,
			PENDING_AUTHENTICATION,
			AUTHENTICATION_FAILED,
			AUTHENTICATION_REDIRECTED,
			PENDING_AUTHORIZATION,
			AUTHORIZED,
			AUTHORIZATION_FAILED,
			CANCELLED,
			EXPIRED,
			CAPTURE_REQUESTED,
			CAPTURE_FAILED,
			SETTLED,
			PAID_NOT_SETTLED,
			PAID_SETTLED
        }
        ValueObject PaymentAttemptID {
            int id key
        }
        ValueObject MerchantConfig{
        }
        ValueObject Processor{
        }
        DomainEvent PaymentAttemptEvent
    }
    Aggregate Refund{
        Entity Refund{
            aggregateRoot
            string paymentAttemptID
            - RefundID refundID
            - PaymentDirective paymentDirective
            - PaymentInstrument paymentInstrumentSnapshot
            - RefundState refundState
        }
        ValueObject RefundID {
            int id key
        }
        enum  RefundState {
            RECEIVED,
			SENT_FOR_REFUND,
			FAILED_RETRYABLE,
			FAILED,
			SUCCEEDED // Core only
        }
        DomainEvent RefundProcessingFailedEvent
        DomainEvent RefundProcessingSuccessEvent
        DomainEvent RefundReceivedEvent
        DomainEvent RefundReceivingFailedEvent
    }
    Aggregate PaymentDirective{
        Entity PaymentDirective{
            aggregateRoot
            - PaymentDirectiveID paymentDirectiveID
            - PaymentDirectiveState paymentDirectiveState
        }
        ValueObject PaymentDirectiveID {
            int id key
        }
        enum  PaymentDirectiveState {
            DIRECTIVE_PENDING,
			DIRECTIVE_SUCCEEDED,
			DIRECTIVE_FAILED,
			DIRECTIVE_TECH_ERROR,
			DIRECTIVE_CANCELED
        }
    }
    Aggregate Consent{
        Entity Consent{
            aggregateRoot
            - PaymentIntentID paymentIntentId
        }
    }
}

BoundedContext PACheckout{
}
BoundedContext PAGetPaid{
}

BoundedContext PACardAdaptor{
}

BoundedContext PALPMAdaptor{
}

BoundedContext RiskFraud{
}

BoundedContext PACard3ds{
}

BoundedContext PAFX{
}

BoundedContext PAMerchantEvents{
}

BoundedContext PAConfigCenter{
}

BoundedContext Accountservice{
}

BoundedContext FX{
}

BoundedContext PAFundSplit{
}

BoundedContext PAExecutorwallet{
}

BoundedContext PAExecutorcard{
}

BoundedContext PAClearingHouse{
}

BoundedContext PAAccountUpdater{
}

BoundedContext PARoutingEngine{
}

BoundedContext PAMerchantCenter{
}

BoundedContext PATokenService{
}

BoundedContext AuthorizationService{
}

BoundedContext Airway{
}

BoundedContext NotificationWebhook{
}

BoundedContext PAExperimentEngine{
}

BoundedContext GTPN{
}

